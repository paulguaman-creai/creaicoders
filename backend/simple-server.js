const express = require('express');
const cors = require('cors');
// Agregamos fetch para hacer llamadas a APIs externas
const fetch = require('node-fetch');

const app = express();
app.use(cors({
  origin: 'http://localhost:5173'
}));
app.use(express.json());

// Datos educativos con ejercicios evaluables y quizzes
const educationalData = {
  modules: [
    {
      id: 'internet-basics',
      title: 'C√≥mo Funciona Internet',
      description: 'Aprende los fundamentos de Internet desde cero con ejercicios interactivos',
      estimatedTime: '45 min',
      difficulty: 'Principiante',
      imageUrl: '/api/placeholder/400/250',
      totalLessons: 4,
      completedLessons: 0,
      slug: 'como-funciona-internet'
    }
  ],
  
  lessons: {
    'internet-basics': [
      {
        id: 'lesson-1',
        title: '¬øQu√© es Internet?',
        slug: 'que-es-internet',
        moduleId: 'internet-basics',
        order: 1,
        estimatedTime: '10 min',
        difficulty: 'Principiante',
        isCompleted: false,
        points: 50
      },
      {
        id: 'lesson-2',
        title: 'Direcciones de Internet (IP)',
        slug: 'direcciones-ip',
        moduleId: 'internet-basics',
        order: 2,
        estimatedTime: '15 min',
        difficulty: 'Principiante',
        isCompleted: false,
        points: 75
      },
      {
        id: 'lesson-3',
        title: 'Protocolos de Internet',
        slug: 'protocolos-internet',
        moduleId: 'internet-basics',
        order: 3,
        estimatedTime: '12 min',
        difficulty: 'Intermedio',
        isCompleted: false,
        points: 60
      },
      {
        id: 'lesson-4',
        title: 'Pr√°ctica Final: Diagn√≥stico de Red',
        slug: 'practica-final',
        moduleId: 'internet-basics',
        order: 4,
        estimatedTime: '20 min',
        difficulty: 'Intermedio',
        isCompleted: false,
        points: 100
      }
    ]
  },

  lessonContent: {
    'lesson-1': {
      id: 'lesson-1',
      title: '¬øQu√© es Internet?',
      description: 'Descubre qu√© es Internet y c√≥mo funciona esta incre√≠ble red global',
      contentBlocks: [
        {
          type: 'text',
          content: `# ¬øQu√© es Internet? üåê

Internet es una **red global de computadoras** interconectadas que permite el intercambio de informaci√≥n entre millones de dispositivos en todo el mundo.

## Conceptos clave:

### üèôÔ∏è Internet como una Ciudad
Imagina Internet como una ciudad gigante:
- **Calles**: Las conexiones de red
- **Direcciones**: Las direcciones IP  
- **Edificios**: Los servidores y computadoras
- **Carteros**: Los protocolos que entregan datos
- **Cartas**: Los paquetes de informaci√≥n

### üì° Componentes principales:
1. **Dispositivos conectados** (computadoras, tel√©fonos, servidores)
2. **Protocolos de comunicaci√≥n** (TCP/IP, HTTP, HTTPS)  
3. **Infraestructura f√≠sica** (cables, routers, antenas)
4. **Proveedores de Internet** (ISP - Internet Service Providers)`
        },
        {
          type: 'external-quiz',
          metadata: {
            title: 'Quiz: Conceptos B√°sicos de Internet',
            description: 'Eval√∫a tu comprensi√≥n sobre qu√© es Internet, protocolos, infraestructura y componentes principales de la red global.',
            url: 'https://forms.office.com/r/ENCY000q5L'
          }
        },
        {
          type: 'text',
          content: `## üîç Datos curiosos sobre Internet:

- **Velocidad**: Los datos pueden viajar a casi la velocidad de la luz
- **Tama√±o**: Hay m√°s de 4.6 mil millones de usuarios de Internet en el mundo
- **Tr√°fico**: Se env√≠an trillones de emails cada d√≠a
- **Crecimiento**: Internet crece exponencialmente cada a√±o

### ¬øSab√≠as qu√©?
Internet no tiene un "centro" o control central. Es una red **descentralizada** que funciona mediante la cooperaci√≥n de miles de organizaciones en todo el mundo.`
        },
        {
          type: 'interactive',
          widgetType: 'real-time-exercise',
          metadata: {
            exerciseType: 'stats',
            title: 'üìä Estad√≠sticas de Internet en Tiempo Real',
            description: 'Explora datos actuales sobre el uso mundial de Internet'
          }
        }
      ]
    },

    'lesson-2': {
      id: 'lesson-2',
      title: 'Direcciones de Internet (IP)',
      description: 'Aprende qu√© son las direcciones IP y c√≥mo funcionan con ejercicios pr√°cticos',
      contentBlocks: [
        {
          type: 'text',
          content: `# Direcciones IP: El Sistema de Direcciones de Internet üìÆ

Una **direcci√≥n IP** (Internet Protocol) es un identificador √∫nico que se asigna a cada dispositivo conectado a Internet.

## ¬øC√≥mo funcionan? üè†

### Analog√≠a con direcciones postales:
- **Tu casa** = Tu computadora/dispositivo
- **Direcci√≥n postal** = Direcci√≥n IP
- **C√≥digo postal** = Rango de red
- **Cartero** = Router/Internet

### Formato de IPv4:
\`\`\`
192.168.1.1
   ‚Üë     ‚Üë
 Red   Dispositivo
\`\`\`

Cada n√∫mero puede ir de **0 a 255** (8 bits cada uno = 32 bits total)`
        },
        {
          type: 'interactive',
          widgetType: 'real-time-exercise',
          metadata: {
            exerciseType: 'ip',
            title: 'üîç Clasificador de IPs con Datos Reales',
            description: 'Clasifica direcciones IP reales obtenidas de APIs externas',
            note: 'Una direcci√≥n IP v√°lida tiene 4 n√∫meros separados por puntos, cada n√∫mero entre 0-255'
          }
        },
        {
          type: 'interactive',
          widgetType: 'geolocation',
          metadata: {
            title: 'üåç Localizador de IP',
            description: 'Descubre la ubicaci√≥n aproximada de una direcci√≥n IP',
            placeholder: 'Ejemplo: 8.8.8.8',
            note: 'La geolocalizaci√≥n IP es aproximada y se basa en bases de datos p√∫blicas'
          }
        },
        {
          type: 'text',
          content: `## Tipos de direcciones IP:

### üè† IPs Privadas (Red Local):
- \`192.168.x.x\` - Redes dom√©sticas
- \`10.x.x.x\` - Redes empresariales grandes  
- \`172.16.x.x - 172.31.x.x\` - Redes empresariales medianas

### üåê IPs P√∫blicas:
- √önicas en toda Internet
- Asignadas por tu proveedor de Internet (ISP)
- Visibles desde cualquier lugar del mundo

### üîß IPs Especiales:
- \`127.0.0.1\` - Localhost (tu propia m√°quina)
- \`0.0.0.0\` - Direcci√≥n no v√°lida/sin asignar
- \`255.255.255.255\` - Broadcast (todos los dispositivos)`
        },
        {
          type: 'external-quiz',
          metadata: {
            title: 'Quiz: Direcciones IP',
            description: 'Pon a prueba tus conocimientos sobre direcciones IPv4, rangos v√°lidos, IPs privadas vs p√∫blicas y localhost.',
            url: ''
          }
        }
      ]
    },

    'lesson-3': {
      id: 'lesson-3',
      title: 'Protocolos de Internet',
      description: 'Comprende los protocolos que hacen posible la comunicaci√≥n en Internet',
      contentBlocks: [
        {
          type: 'text',
          content: `# Protocolos de Internet: Los Idiomas de la Red üó£Ô∏è

Los **protocolos** son reglas y est√°ndares que permiten que los dispositivos se comuniquen en Internet.

## üåê HTTP vs HTTPS

### HTTP (HyperText Transfer Protocol)
- **Puerto**: 80
- **Seguridad**: ‚ùå No cifrado
- **Uso**: Sitios web b√°sicos (cada vez menos com√∫n)

### HTTPS (HTTP Secure)  
- **Puerto**: 443
- **Seguridad**: ‚úÖ Cifrado SSL/TLS
- **Uso**: Sitios web modernos y seguros

## üîß TCP/IP: La Base de Internet

### TCP (Transmission Control Protocol)
- Garantiza que los datos lleguen completos
- Ordena los paquetes correctamente
- Maneja errores y retransmisiones

### IP (Internet Protocol)
- Define c√≥mo direccionar los paquetes
- Enruta los datos por la red
- No garantiza entrega (eso lo hace TCP)`
        },
        {
          type: 'interactive',
          widgetType: 'real-time-exercise',
          metadata: {
            exerciseType: 'url-analyzer',
            title: 'üîç Analizador de URLs',
            description: 'Analiza la estructura de diferentes URLs y sus protocolos',
            placeholder: 'Ejemplo: https://www.google.com/search?q=internet',
            note: 'Una URL completa incluye protocolo, dominio, puerto, ruta y par√°metros'
          }
        },
        {
          type: 'interactive',
          widgetType: 'code-exercise',
          metadata: {
            exercise: {
              id: 'url-parser',
              title: 'üõ†Ô∏è Ejercicio: Parseador de URLs',
              description: 'Crea una funci√≥n que extraiga el protocolo de una URL',
              startingCode: `// Completa esta funci√≥n para extraer el protocolo de una URL
function getProtocol(url) {
  // Tu c√≥digo aqu√≠
  // Pista: usa split(':') o indexOf(':')
  
  let result = ""; // Define tu resultado aqu√≠
  return result;
}

// El resultado debe ser asignado a la variable 'result'
const result = getProtocol("https://www.google.com");`,
              expectedOutput: 'https',
              testCases: [
                {
                  input: 'https://www.google.com',
                  expected: 'https',
                  description: 'URL HTTPS b√°sica'
                },
                {
                  input: 'http://example.com',
                  expected: 'http',
                  description: 'URL HTTP b√°sica'
                },
                {
                  input: 'ftp://files.example.com',
                  expected: 'ftp',
                  description: 'URL FTP'
                }
              ],
              hints: [
                'Las URLs tienen el formato: protocolo://dominio/ruta',
                'Puedes usar split(":") para dividir la URL',
                'El protocolo es la primera parte antes de "://"',
                'Tambi√©n puedes usar indexOf(":") para encontrar la posici√≥n'
              ],
              points: 25
            }
          }
        },
        {
          type: 'text',
          content: `## üì° Otros Protocolos Importantes:

### üìß Correo Electr√≥nico:
- **SMTP**: Env√≠o de emails (puerto 587/465)
- **POP3**: Descarga de emails (puerto 995)  
- **IMAP**: Acceso a emails en servidor (puerto 993)

### üìÇ Transferencia de Archivos:
- **FTP**: Transferencia b√°sica (puerto 21)
- **SFTP**: FTP seguro sobre SSH (puerto 22)
- **FTPS**: FTP con SSL/TLS

### üîí Seguridad:
- **SSL/TLS**: Cifrado de conexiones
- **SSH**: Acceso remoto seguro (puerto 22)
- **VPN**: Redes privadas virtuales

## ¬øPor qu√© son importantes?

Los protocolos aseguran que:
1. **Todos hablen el mismo idioma** üó£Ô∏è
2. **Los datos lleguen √≠ntegros** ‚úÖ  
3. **Haya seguridad** üîí
4. **La comunicaci√≥n sea eficiente** ‚ö°`
        }
      ]
    },

    'lesson-4': {
      id: 'lesson-4',
      title: 'Pr√°ctica Final: Diagn√≥stico de Red',
      description: 'Pon a prueba todo lo aprendido con ejercicios pr√°cticos de diagn√≥stico',
      contentBlocks: [
        {
          type: 'text',
          content: `# üéØ Pr√°ctica Final: Diagn√≥stico de Red

¬°Es hora de aplicar todo lo que has aprendido! En esta lecci√≥n final, realizar√°s un diagn√≥stico completo de red usando todas las herramientas y conceptos vistos.

## üßë‚Äçüíª Perfil: Eres un T√©cnico de Redes

Acabas de recibir un reporte de problemas de conectividad. Tu trabajo es:

1. **Analizar** las direcciones IP reportadas
2. **Verificar** la conectividad de servicios
3. **Identificar** posibles problemas de seguridad
4. **Documentar** tus hallazgos

## üìã Casos de Estudio

### Caso 1: Oficina Remota
Una oficina remota reporta problemas para acceder a ciertos sitios web.`
        },
        {
          type: 'interactive',
          widgetType: 'real-time-exercise',
          metadata: {
            exerciseType: 'dns',
            title: 'üåê An√°lisis de Conectividad DNS en Tiempo Real',
            description: 'Prueba la conectividad a sitios web reales y analiza los resultados'
          }
        },
        {
          type: 'external-quiz',
          metadata: {
            title: 'üïµÔ∏è Caso 1: Diagn√≥stico de Conectividad',
            description: 'Resuelve casos pr√°cticos de diagn√≥stico de red, problemas de conectividad y herramientas de red como ping y traceroute.',
            url: 'https://forms.gle/network-troubleshooting-quiz'
          }
        },
        {
          type: 'interactive',
          widgetType: 'code-exercise',
          metadata: {
            exercise: {
              id: 'network-validator',
              title: 'üõ†Ô∏è Ejercicio Final: Validador de Red Completo',
              description: 'Crea una funci√≥n que valide tanto IPs como URLs y determine si son seguras',
              startingCode: `// Crea una funci√≥n que analice si una direcci√≥n es segura
function isSecureAddress(address) {
  // Determina si es IP o URL
  // Para IPs: considera seguras las privadas (192.168.x.x, 10.x.x.x, 172.16-31.x.x)
  // Para URLs: considera seguras solo las HTTPS
  
  let result = "unknown"; // Cambia esto por "secure", "insecure", o "invalid"
  
  // Tu c√≥digo aqu√≠
  
  return result;
}

// Test con diferentes tipos de direcciones
const result = isSecureAddress("https://www.google.com");`,
              expectedOutput: 'secure',
              testCases: [
                {
                  input: 'https://www.google.com',
                  expected: 'secure',
                  description: 'URL HTTPS (segura)'
                },
                {
                  input: 'http://example.com',
                  expected: 'insecure',
                  description: 'URL HTTP (insegura)'
                },
                {
                  input: '192.168.1.1',
                  expected: 'secure',
                  description: 'IP privada (segura)'
                },
                {
                  input: '8.8.8.8',
                  expected: 'insecure',
                  description: 'IP p√∫blica (insegura para red local)'
                },
                {
                  input: 'invalid-address',
                  expected: 'invalid',
                  description: 'Direcci√≥n inv√°lida'
                }
              ],
              hints: [
                'Usa includes() para verificar si contiene "https://" o "http://"',
                'Para IPs, verifica si comienza con "192.168." o "10." o "172."',
                'Puedes usar split(".") para analizar los octetos de IP',
                'Recuerda manejar el caso de direcciones inv√°lidas'
              ],
              points: 40
            }
          }
        },
        {
          type: 'text',
          content: `## üéâ ¬°Felicitaciones!

Has completado el m√≥dulo "C√≥mo Funciona Internet". Ahora tienes una comprensi√≥n s√≥lida de:

### ‚úÖ Conceptos Dominados:
- **Internet y sus componentes** üåê
- **Direcciones IP y tipos** üìÆ
- **Protocolos de comunicaci√≥n** üó£Ô∏è
- **An√°lisis de URLs** üîç
- **Seguridad b√°sica en redes** üîí
- **Diagn√≥stico de problemas** üõ†Ô∏è

### üöÄ Pr√≥ximos Pasos:
1. **Aplicar** estos conocimientos en proyectos reales
2. **Explorar** herramientas avanzadas de red
3. **Profundizar** en seguridad cibern√©tica
4. **Estudiar** arquitecturas de red m√°s complejas

### üìä Tu Progreso:
- **Lecciones completadas**: 4/4
- **Ejercicios realizados**: M√∫ltiples tipos
- **Habilidades nuevas**: Diagn√≥stico de red

¬°Contin√∫a aprendiendo y explorando el fascinante mundo de las redes e Internet! üéì`
        }
      ]
    }
  }
};

// Rutas de la API
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'Educational API Server running!' });
});

app.get('/api/modules', (req, res) => {
  res.json(educationalData.modules);
});

app.get('/api/modules/:slug', (req, res) => {
  const module = educationalData.modules.find(m => m.slug === req.params.slug);
  if (!module) {
    return res.status(404).json({ error: 'Module not found' });
  }
  res.json(module);
});

app.get('/api/modules/:moduleId/lessons', (req, res) => {
  const lessons = educationalData.lessons[req.params.moduleId];
  if (!lessons) {
    return res.status(404).json({ error: 'Module lessons not found' });
  }
  res.json(lessons);
});

app.get('/api/lessons/:lessonId', (req, res) => {
  const lessonContent = educationalData.lessonContent[req.params.lessonId];
  if (!lessonContent) {
    return res.status(404).json({ error: 'Lesson content not found' });
  }
  res.json(lessonContent);
});

// Nueva ruta para actualizar progreso
app.post('/api/lessons/:lessonId/complete', (req, res) => {
  const { lessonId } = req.params;
  const { score, totalPoints } = req.body;
  
  // En una implementaci√≥n real, aqu√≠ guardar√≠as en base de datos
  console.log(`Lesson ${lessonId} completed with score: ${score}/${totalPoints}`);
  
  res.json({ 
    success: true, 
    message: 'Progress updated',
    score,
    totalPoints 
  });
});

// Nuevo endpoint para obtener IP p√∫blica real usando ipify.org
app.get('/api/network/public-ip', async (req, res) => {
  try {
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    
    res.json({
      success: true,
      publicIP: data.ip,
      timestamp: new Date().toISOString(),
      source: 'ipify.org'
    });
  } catch (error) {
    console.error('Error fetching public IP:', error);
    res.status(500).json({
      success: false,
      error: 'No se pudo obtener la IP p√∫blica',
      fallback: '203.0.113.1' // IP de ejemplo seg√∫n RFC5737
    });
  }
});

// Endpoint para validar URLs y obtener informaci√≥n real
app.post('/api/network/analyze-url', async (req, res) => {
  const { url } = req.body;
  
  if (!url) {
    return res.status(400).json({ 
      success: false, 
      error: 'URL requerida' 
    });
  }

  try {
    // An√°lisis b√°sico de la URL
    const urlObj = new URL(url);
    const isSecure = urlObj.protocol === 'https:';
    const domain = urlObj.hostname;
    
    // Intentar hacer una petici√≥n HEAD para verificar si existe
    let statusCode = null;
    let responseTime = null;
    let isOnline = false;
    
    try {
      const startTime = Date.now();
      const response = await fetch(url, { 
        method: 'HEAD',
        timeout: 5000,
        headers: {
          'User-Agent': 'CreaiCoders-Learning-Platform/1.0'
        }
      });
      responseTime = Date.now() - startTime;
      statusCode = response.status;
      isOnline = response.ok;
    } catch (fetchError) {
      console.log('URL no accesible:', fetchError.message);
    }

    res.json({
      success: true,
      analysis: {
        url,
        protocol: urlObj.protocol.replace(':', ''),
        domain,
        port: urlObj.port || (isSecure ? 443 : 80),
        isSecure,
        isOnline,
        statusCode,
        responseTime,
        security: {
          level: isSecure ? 'alto' : 'bajo',
          recommendation: isSecure ? 
            'Conexi√≥n segura (HTTPS)' : 
            'Considera usar HTTPS para mayor seguridad'
        }
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(400).json({
      success: false,
      error: 'URL inv√°lida',
      details: error.message
    });
  }
});

// Endpoint para generar ejercicios din√°micos de IP
app.get('/api/network/ip-exercise', async (req, res) => {
  try {
    // Obtener IP p√∫blica real
    const ipResponse = await fetch('https://api.ipify.org?format=json');
    const ipData = await ipResponse.json();
    const realIP = ipData.ip;
    
    // Generar IPs para el ejercicio
    const generateRandomIP = () => {
      return [
        Math.floor(Math.random() * 256),
        Math.floor(Math.random() * 256),
        Math.floor(Math.random() * 256),
        Math.floor(Math.random() * 256)
      ].join('.');
    };
    
    const privateRanges = [
      '192.168.' + Math.floor(Math.random() * 256) + '.' + Math.floor(Math.random() * 256),
      '10.' + Math.floor(Math.random() * 256) + '.' + Math.floor(Math.random() * 256) + '.' + Math.floor(Math.random() * 256),
      '172.' + (16 + Math.floor(Math.random() * 16)) + '.' + Math.floor(Math.random() * 256) + '.' + Math.floor(Math.random() * 256)
    ];
    
    const exercise = {
      id: 'dynamic-ip-' + Date.now(),
      title: 'Clasificaci√≥n de Direcciones IP Reales',
      description: 'Clasifica las siguientes direcciones IP reales como p√∫blicas o privadas',
      realData: {
        yourPublicIP: realIP,
        note: 'Esta es tu IP p√∫blica real obtenida de ipify.org'
      },
      questions: [
        {
          ip: realIP,
          type: 'publica',
          explanation: 'Esta es tu direcci√≥n IP p√∫blica real, asignada por tu proveedor de Internet'
        },
        {
          ip: privateRanges[0],
          type: 'privada',
          explanation: 'Rango 192.168.x.x - Red privada clase C'
        },
        {
          ip: privateRanges[1],
          type: 'privada', 
          explanation: 'Rango 10.x.x.x - Red privada clase A'
        },
        {
          ip: generateRandomIP(),
          type: 'publica',
          explanation: 'Direcci√≥n IP p√∫blica - accesible desde Internet'
        }
      ].sort(() => Math.random() - 0.5), // Mezclar preguntas
      points: 25
    };
    
    res.json({
      success: true,
      exercise,
      metadata: {
        generated: new Date().toISOString(),
        source: 'ipify.org + algoritmo din√°mico'
      }
    });
    
  } catch (error) {
    console.error('Error generating IP exercise:', error);
    res.status(500).json({
      success: false,
      error: 'No se pudo generar el ejercicio',
      fallbackExercise: {
        id: 'static-ip-fallback',
        title: 'Clasificaci√≥n de Direcciones IP',
        questions: [
          { ip: '192.168.1.1', type: 'privada' },
          { ip: '8.8.8.8', type: 'publica' }
        ]
      }
    });
  }
});

// Endpoint para ejercicios de DNS en tiempo real
app.get('/api/network/dns-exercise', async (req, res) => {
  const popularDomains = [
    'google.com', 'github.com', 'stackoverflow.com', 
    'mozilla.org', 'wikipedia.org', 'microsoft.com'
  ];
  
  try {
    // Seleccionar un dominio aleatorio para el ejercicio
    const selectedDomain = popularDomains[Math.floor(Math.random() * popularDomains.length)];
    
    // Intentar resolver informaci√≥n del dominio
    const urls = [
      `https://${selectedDomain}`,
      `http://${selectedDomain}`
    ];
    
    const results = [];
    for (const url of urls) {
      try {
        const startTime = Date.now();
        const response = await fetch(url, { 
          method: 'HEAD', 
          timeout: 3000,
          headers: {
            'User-Agent': 'CreaiCoders-Learning-Platform/1.0'
          }
        });
        const responseTime = Date.now() - startTime;
        
        results.push({
          url,
          accessible: response.ok,
          statusCode: response.status,
          responseTime,
          secure: url.startsWith('https')
        });
      } catch (error) {
        results.push({
          url,
          accessible: false,
          error: error.message,
          secure: url.startsWith('https')
        });
      }
    }
    
    res.json({
      success: true,
      exercise: {
        id: 'dns-real-' + Date.now(),
        title: `An√°lisis de Conectividad: ${selectedDomain}`,
        description: `Analiza los resultados reales de conectividad para ${selectedDomain}`,
        domain: selectedDomain,
        testResults: results,
        questions: [
          {
            question: `¬øCu√°l es la diferencia principal entre HTTP y HTTPS para ${selectedDomain}?`,
            options: [
              'HTTP es m√°s r√°pido',
              'HTTPS proporciona cifrado y seguridad',
              'No hay diferencia',
              'HTTP funciona mejor'
            ],
            correct: 1,
            points: 10
          },
          {
            question: 'Bas√°ndote en los resultados, ¬øqu√© protocolo recomendar√≠as?',
            options: [
              'HTTP por simplicidad',
              'HTTPS por seguridad', 
              'Cualquiera de los dos',
              'Depende del navegador'
            ],
            correct: 1,
            points: 15
          }
        ]
      },
      metadata: {
        tested: new Date().toISOString(),
        realTime: true
      }
    });
    
  } catch (error) {
    console.error('Error in DNS exercise:', error);
    res.status(500).json({
      success: false,
      error: 'Error generando ejercicio DNS'
    });
  }
});

// Endpoint para obtener estad√≠sticas de Internet en tiempo real
app.get('/api/network/internet-stats', async (req, res) => {
  try {
    // Simular obtenci√≥n de estad√≠sticas (en una implementaci√≥n real podr√≠as usar APIs como worldometers)
    const currentYear = new Date().getFullYear();
    const stats = {
      timestamp: new Date().toISOString(),
      year: currentYear,
      estimatedUsers: Math.floor(4.9 + Math.random() * 0.5), // Billones
      estimatedWebsites: Math.floor(1.8 + Math.random() * 0.2), // Billones  
      emailsSentToday: Math.floor(300 + Math.random() * 50), // Billones
      searchesToday: Math.floor(8.5 + Math.random() * 1), // Billones
      dataTraffic: Math.floor(4.8 + Math.random() * 0.5), // Zettabytes por a√±o
      activeDevices: Math.floor(50 + Math.random() * 10), // Billones
      source: 'Estimaciones basadas en tendencias actuales',
      disclaimer: 'Datos aproximados para fines educativos'
    };
    
    res.json({
      success: true,
      stats,
      formatted: {
        users: `${stats.estimatedUsers} mil millones de usuarios`,
        websites: `${stats.estimatedWebsites} mil millones de sitios web`,
        emails: `${stats.emailsSentToday} mil millones de emails hoy`,
        searches: `${stats.searchesToday} mil millones de b√∫squedas hoy`,
        traffic: `${stats.dataTraffic} zettabytes de tr√°fico anual`,
        devices: `${stats.activeDevices} mil millones de dispositivos activos`
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Error obteniendo estad√≠sticas'
    });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Educational API server running on port ${PORT}`);
  console.log(`üìö Content includes interactive quizzes and code exercises`);
  console.log(`üîó Frontend should connect to: http://localhost:${PORT}`);
}); 